name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/deploy.yml'
      - 'docker-compose.yml'
      - 'db_backup.dump'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Переходим в директорию проекта
          cd /var/www/fonds-relations
          
          # Авторизуемся в Docker Hub с использованием токена
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # Останавливаем все контейнеры Docker
          docker stop $(docker ps -aq) || true
          
          # Удаляем все остановленные контейнеры
          docker rm $(docker ps -aq) || true
          
          # Удаляем неиспользуемые образы
          docker image prune -af
          
          # Проверяем, что порт 8000 свободен
          if lsof -i:8000; then
            echo "Port 8000 is still in use. Trying to find and kill the process..."
            fuser -k 8000/tcp || true
            sleep 5
          fi
          
          # Проверяем, что порт 3000 свободен для фронтенда
          if lsof -i:3000; then
            echo "Port 3000 is still in use. Trying to find and kill the process..."
            fuser -k 3000/tcp || true
            sleep 5
          fi

          # Обновляем код
          git fetch origin main
          git reset --hard origin/main
          
          cd backend
          
          # Исправляем права доступа для start.sh
          chmod +x start.sh
          echo "Applied executable permissions to start.sh"
          
          # Создаем .env из примера если его нет
          if [ ! -f .env ]; then
            cp .env.example .env
          fi
          
          # Обновляем переменные окружения из секретов
          sed -i "s/your-secret-key-here/${{ secrets.APP_SECRET_KEY }}/g" .env
          sed -i "s/your-email@gmail.com/${{ secrets.SMTP_USER }}/g" .env
          sed -i "s/your-app-specific-password/${{ secrets.SMTP_PASSWORD }}/g" .env
          
          # Явно добавляем SECRET_KEY если его нет
          if ! grep -q "SECRET_KEY" .env; then
            echo "SECRET_KEY=${{ secrets.APP_SECRET_KEY }}" >> .env
          fi
          
          # Выводим текущие значения для диагностики (без показа секретов)
          echo "Environment variables configured:"
          grep -v "PASSWORD\|KEY" .env || true
          echo "Secret variables masked for security"
          
          cd ..
          
          # Запускаем контейнеры
          docker-compose down
          docker-compose up -d --build
          
          # Увеличиваем время ожидания до 15 секунд
          echo "Waiting 15 seconds for containers to start..."
          sleep 15
          
          # Проверяем запущенные контейнеры и их состояние
          docker ps -a
          
          # Проверяем логи контейнеров
          docker-compose logs --tail=50
          
          # Восстановление базы данных из дампа из репозитория
          if [ -f db_backup.dump ]; then
            echo "Database dump found in repository. Starting restore process..."
            # Получаем имя контейнера базы данных
            DB_CONTAINER=$(docker ps | grep db | awk '{print $1}')
            
            if [ -n "$DB_CONTAINER" ]; then
              echo "Database container found: $DB_CONTAINER"
              
              # Копируем дамп в контейнер
              docker cp db_backup.dump $DB_CONTAINER:/tmp/
              
              # Останавливаем все контейнеры кроме базы данных для предотвращения конфликтов
              echo "Stopping application containers to prevent conflicts..."
              # Используем промежуточную переменную для хранения ID контейнеров
              OTHER_CONTAINERS=$(docker ps | grep -v db | grep -v "CONTAINER" | awk '{print $1}')
              if [ -n "$OTHER_CONTAINERS" ]; then
                echo "Found application containers to stop"
                for container_id in $OTHER_CONTAINERS; do
                  echo "Stopping container: $container_id"
                  docker stop $container_id >/dev/null 2>&1
                done
              else
                echo "No other containers found to stop"
              fi
              
              # Восстанавливаем базу данных
              echo "Restoring database from dump..."
              # Сначала очищаем существующую базу данных
              docker exec $DB_CONTAINER dropdb -U postgres app --if-exists
              docker exec $DB_CONTAINER createdb -U postgres app
              
              # Восстанавливаем из дампа
              docker exec $DB_CONTAINER pg_restore -U postgres -d app -c /tmp/db_backup.dump
              
              # Запускаем контейнеры обратно
              echo "Starting application containers..."
              docker-compose up -d
              
              # Ждем запуска контейнеров
              echo "Waiting for containers to restart..."
              sleep 20
              
              echo "Database restore completed."
            else
              echo "Database container not found. Skipping restore."
            fi
          else
            echo "No database dump found in repository. Checking legacy location..."
            
            # Для обратной совместимости проверяем старое расположение
            if [ -f /tmp/db_backup.dump ]; then
              echo "Database dump found at /tmp/db_backup.dump. Starting restore process..."
              # Получаем имя контейнера базы данных
              DB_CONTAINER=$(docker ps | grep db | awk '{print $1}')
              
              if [ -n "$DB_CONTAINER" ]; then
                echo "Database container found: $DB_CONTAINER"
                
                # Копируем дамп в контейнер
                docker cp /tmp/db_backup.dump $DB_CONTAINER:/tmp/
                
                # Останавливаем все контейнеры кроме базы данных для предотвращения конфликтов
                echo "Stopping application containers to prevent conflicts..."
                # Используем промежуточную переменную для хранения ID контейнеров
                OTHER_CONTAINERS=$(docker ps | grep -v db | grep -v "CONTAINER" | awk '{print $1}')
                if [ -n "$OTHER_CONTAINERS" ]; then
                  echo "Found application containers to stop"
                  for container_id in $OTHER_CONTAINERS; do
                    echo "Stopping container: $container_id"
                    docker stop $container_id >/dev/null 2>&1
                  done
                else
                  echo "No other containers found to stop"
                fi
                
                # Восстанавливаем базу данных
                echo "Restoring database from dump..."
                # Сначала очищаем существующую базу данных
                docker exec $DB_CONTAINER dropdb -U postgres app --if-exists
                docker exec $DB_CONTAINER createdb -U postgres app
                
                # Восстанавливаем из дампа
                docker exec $DB_CONTAINER pg_restore -U postgres -d app -c /tmp/db_backup.dump
                
                # Запускаем контейнеры обратно
                echo "Starting application containers..."
                docker-compose up -d
                
                # Ждем запуска контейнеров
                echo "Waiting for containers to restart..."
                sleep 20
                
                echo "Database restore completed."
              else
                echo "Database container not found. Skipping restore."
              fi
            else
              echo "No database dump found at /tmp/db_backup.dump. Skipping restore."
            fi
          fi
          
          # Создаем дефолтных пользователей
          echo "Creating default users..."
          # Копируем скрипт в контейнер бэкенда
          BACKEND_CONTAINER=$(docker ps | grep backend | awk '{print $1}')
          if [ -n "$BACKEND_CONTAINER" ]; then
            echo "Backend container found: $BACKEND_CONTAINER"
            docker cp create_default_users.py $BACKEND_CONTAINER:/app/
            
            # Устанавливаем необходимые зависимости в контейнере
            docker exec $BACKEND_CONTAINER pip install psycopg2-binary passlib
            
            # Запускаем скрипт
            docker exec $BACKEND_CONTAINER python /app/create_default_users.py
            echo "Default users creation completed."
          else
            echo "Backend container not found. Skipping user creation."
          fi
          
          # Проверяем, что бэкенд контейнер запущен
          if ! docker ps | grep -q backend; then
            echo "Backend container is not running!"
            docker-compose logs backend
            exit 1
          fi
          
          # Проверяем, что фронтенд контейнер запущен
          if ! docker ps | grep -q frontend; then
            echo "Frontend container is not running!"
            docker-compose logs frontend
            exit 1
          fi
          
          # Проверяем сетевые соединения внутри Docker
          docker exec $(docker ps | grep backend | awk '{print $1}') netstat -tulpn || echo "Could not check network connections"
          
          # Проверяем, что API отвечает и возвращает правильный статус
          echo "Checking API health..."
          # Проверяем с более подробной информацией
          curl -v http://localhost:8000/docs
          
          # Пробуем подключиться к API
          for i in {1..5}; do
            echo "Attempt $i: Checking API health..."
            response=$(curl -s http://localhost:8000/api/v1)
            if echo "$response" | grep -q '"status":"ok"'; then
              echo "API health check succeeded!"
              break
            fi
            
            if [ $i -eq 5 ]; then
              echo "API health check failed after 5 attempts! Response: $response"
              echo "Trying alternative path..."
              response=$(curl -s http://localhost:8000/api/v1/)
              if echo "$response" | grep -q '"status":"ok"'; then
                echo "API health check succeeded on alternative path!"
                break
              else
                echo "API health check failed on both paths! Response: $response"
                echo "Full logs:"
                docker-compose logs
                exit 1
              fi
            fi
            
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done
          
          # Проверяем доступность фронтенда
          echo "Checking Frontend health..."
          response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001)
          if [[ "$response_code" = "200" ]]; then
            echo "Frontend health check succeeded!"
          else
            echo "Frontend health check failed! Response code: $response_code"
            echo "Trying to see if Nginx is running properly in the container..."
            docker exec $(docker ps | grep frontend | awk '{print $1}') nginx -t || echo "Nginx configuration test failed"
            docker exec $(docker ps | grep frontend | awk '{print $1}') ps aux || echo "Could not check processes in frontend container"
            docker-compose logs frontend
            exit 1
          fi
          
          echo "Deployment successful!" 